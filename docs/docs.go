// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "HeisenGo",
            "url": "https://github.com/HeisenGo"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/v1/login": {
            "post": {
                "description": "Authenticate a user with email and password.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Login an existing user",
                "parameters": [
                    {
                        "description": "Login details",
                        "name": "login",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "auth_token: the authentication token for the user",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "error: bad request, invalid email or password",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/boards/invite": {
            "post": {
                "description": "Invite a user to a board with a specified role.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Boards"
                ],
                "summary": "Invite user to board",
                "parameters": [
                    {
                        "description": "Invitation details",
                        "name": "invite",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/presenter.InviteUserToBoard"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "invite: the details of the invitation",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "error: bad request, invalid invitation details",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "error: forbidden, permission denied to invite",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "error: internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/boards/{boardID}": {
            "get": {
                "description": "Retrieve a full board by its ID for the authenticated user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Boards"
                ],
                "summary": "Get full board by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Board ID",
                        "name": "boardID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "board: the full board details",
                        "schema": {
                            "$ref": "#/definitions/presenter.FullBoardResp"
                        }
                    },
                    "400": {
                        "description": "error: bad request, wrong claim type or invalid board ID format",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "error: internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/columns": {
            "post": {
                "description": "Create multiple columns for a specified board.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Columns"
                ],
                "summary": "Create columns",
                "parameters": [
                    {
                        "description": "Board ID",
                        "name": "board_id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Columns creation details",
                        "name": "columns",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/presenter.CreateColumnsRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "response: details of created columns",
                        "schema": {
                            "$ref": "#/definitions/presenter.CreateColumnsResponse"
                        }
                    },
                    "400": {
                        "description": "error: bad request, invalid board ID format or missing columns details",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "error: internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/columns/{columnID}": {
            "delete": {
                "description": "Delete a column by its ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Columns"
                ],
                "summary": "Delete column",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Column ID",
                        "name": "columnID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "error: bad request, invalid column ID format",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "error: not found, column not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "error: internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/public/boards": {
            "get": {
                "description": "Retrieve the public boards.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Boards"
                ],
                "summary": "Get public boards",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page size",
                        "name": "page_size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "boards: paginated list of public boards",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "error: bad request, wrong claim type",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "error: internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/refresh-token": {
            "post": {
                "description": "Refresh the user's authentication token using a valid refresh token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Refresh authentication token",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer {refresh_token}",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "auth_token: the new authentication token",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "error: bad request, token should be provided",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "error: unauthorized, invalid or expired token",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/register": {
            "post": {
                "description": "Create a new user account with the provided details.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "User registration details",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/presenter.UserRegisterReq"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "user_id: the ID of the newly registered user",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "error: bad request, invalid email or password, or email already exists",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "error: internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/tasks": {
            "post": {
                "description": "Create a new task for the authenticated user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tasks"
                ],
                "summary": "Create task",
                "parameters": [
                    {
                        "description": "Task details",
                        "name": "task",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/presenter.UserTask"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "response: details of created task",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "error: bad request, invalid task details",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "error: forbidden, permission denied",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "error: internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "502": {
                        "description": "error: bad gateway, not a member, user not found, board not found, or other error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/tasks/dependency": {
            "post": {
                "description": "Add a dependency between tasks for the authenticated user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tasks"
                ],
                "summary": "Add task dependency",
                "parameters": [
                    {
                        "description": "Dependency details",
                        "name": "dependency",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/presenter.DependentTasks"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "response: details of added task dependency",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "error: bad request, invalid dependency details",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "error: forbidden, permission denied",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "error: internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "502": {
                        "description": "error: bad gateway, circular dependency, task not found, or other error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/user/boards": {
            "get": {
                "description": "Retrieve the boards associated with the authenticated user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Boards"
                ],
                "summary": "Get user's boards",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page size",
                        "name": "page_size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "boards: paginated list of user's boards",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "error: bad request, wrong claim type",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "error: internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new board for the authenticated user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Boards"
                ],
                "summary": "Create user board",
                "parameters": [
                    {
                        "description": "Board details",
                        "name": "board",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/presenter.UserBoard"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "board: the created board details",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "error: bad request, invalid board details",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "error: internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "presenter.BoardColumnResp": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "order": {
                    "type": "integer"
                },
                "tasks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/presenter.BoardTaskResp"
                    }
                }
            }
        },
        "presenter.BoardTaskResp": {
            "type": "object",
            "properties": {
                "end_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "start_at": {
                    "type": "string"
                },
                "story_at": {
                    "type": "integer"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "presenter.BoardUserResp": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                }
            }
        },
        "presenter.ColumnResponseItem": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "order": {
                    "type": "integer"
                }
            }
        },
        "presenter.CreateColumnItem": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                }
            }
        },
        "presenter.CreateColumnsRequest": {
            "type": "object",
            "properties": {
                "board_id": {
                    "type": "string"
                },
                "columns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/presenter.CreateColumnItem"
                    }
                }
            }
        },
        "presenter.CreateColumnsResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/presenter.ColumnResponseItem"
                    }
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "presenter.DependentTasks": {
            "type": "object",
            "required": [
                "depends_on_task_ids",
                "task_id"
            ],
            "properties": {
                "depends_on_task_ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "task_id": {
                    "type": "string"
                }
            }
        },
        "presenter.FullBoardResp": {
            "type": "object",
            "properties": {
                "board_id": {
                    "type": "string"
                },
                "columns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/presenter.BoardColumnResp"
                    }
                },
                "created_at": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/presenter.BoardUserResp"
                    }
                }
            }
        },
        "presenter.InviteUserToBoard": {
            "type": "object",
            "properties": {
                "board_id": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                },
                "user_board_role_id": {
                    "type": "string"
                }
            }
        },
        "presenter.UserBoard": {
            "type": "object",
            "properties": {
                "board_id": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "presenter.UserRegisterReq": {
            "type": "object",
            "required": [
                "email",
                "first_name",
                "last_name",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "presenter.UserTask": {
            "type": "object",
            "required": [
                "assignee_user_id",
                "board_id",
                "title"
            ],
            "properties": {
                "assignee_user_id": {
                    "type": "string"
                },
                "board_id": {
                    "type": "string"
                },
                "depends_on_task_ids": {
                    "description": "for tasks that this task depends on",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "desc": {
                    "type": "string"
                },
                "end_at": {
                    "type": "string"
                },
                "parent_id": {
                    "description": "for tasks that depend on this task",
                    "type": "string"
                },
                "start_at": {
                    "type": "string"
                },
                "story_point": {
                    "type": "integer"
                },
                "task_id": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "heisenflow-System",
	Description:      "Task Management backend server",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
