{
    "swagger": "2.0",
    "info": {
        "description": "Task Management backend server",
        "title": "heisenflow-System",
        "contact": {
            "name": "HeisenGo",
            "url": "https://github.com/HeisenGo"
        },
        "version": "1.0"
    },
    "host": "127.0.0.1:8080",
    "basePath": "/api/v1",
    "paths": {
        "/boards": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new board for the authenticated user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Boards"
                ],
                "summary": "Create user board",
                "parameters": [
                    {
                        "description": "Board details",
                        "name": "board",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/presenter.CreateBoardReq"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "board: the created board details",
                        "schema": {
                            "$ref": "#/definitions/presenter.CreateBoardResponse"
                        }
                    },
                    "400": {
                        "description": "error: bad request, invalid board details",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "error: internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/boards/invite": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Invite a user to a board with a specified role.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Boards"
                ],
                "summary": "Invite user to board",
                "parameters": [
                    {
                        "description": "Invitation details",
                        "name": "invite",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/presenter.InviteUserToBoard"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "invite: the details of the invitation",
                        "schema": {
                            "$ref": "#/definitions/presenter.InviteMemberResponse"
                        }
                    },
                    "400": {
                        "description": "error: bad request, invalid invitation details",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "error: forbidden, permission denied to invite",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "error: internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/boards/my-boards/": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve the boards associated with the authenticated user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Boards"
                ],
                "summary": "Get user's boards",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "uesrID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page size",
                        "name": "page_size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "boards: paginated list of user's boards",
                        "schema": {
                            "$ref": "#/definitions/presenter.BoardUserResp"
                        }
                    },
                    "400": {
                        "description": "error: bad request, wrong claim type",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "error: internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/boards/publics/": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve the public boards.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Boards"
                ],
                "summary": "Get public boards",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "userID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page size",
                        "name": "page_size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "boards: paginated list of public boards",
                        "schema": {
                            "$ref": "#/definitions/presenter.BoardUserResp"
                        }
                    },
                    "400": {
                        "description": "error: bad request, wrong claim type",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "error: internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/boards/{boardID}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve a full board by its ID for the authenticated user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Boards"
                ],
                "summary": "Get full board by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Board ID",
                        "name": "boardID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "board: the full board details",
                        "schema": {
                            "$ref": "#/definitions/presenter.FullBoardResp"
                        }
                    },
                    "400": {
                        "description": "error: bad request, wrong claim type or invalid board ID format",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "error: internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deletes a specific board by its ID for the authenticated user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Boards"
                ],
                "summary": "Delete board",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Board ID",
                        "name": "boardID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad request, invalid user claims, or board ID format",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "Forbidden, user does not have permission to delete the board",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/columns": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Reorder the columns of a board for the authenticated user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Columns"
                ],
                "summary": "Reorder columns",
                "parameters": [
                    {
                        "description": "Reorder Columns Request",
                        "name": "ReorderColumnsRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/presenter.ReorderColumnsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Columns reordered successfully",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/presenter.ColumnResponseItem"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request, invalid reorder details",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "Forbidden, permission denied",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create multiple columns for a specified board.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Columns"
                ],
                "summary": "Create columns",
                "parameters": [
                    {
                        "description": "Columns creation details",
                        "name": "columns",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/presenter.CreateColumnsRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "response: details of created columns",
                        "schema": {
                            "$ref": "#/definitions/presenter.CreateColumnsResponse"
                        }
                    },
                    "400": {
                        "description": "error: bad request, invalid board ID format or missing columns details",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "error: internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/columns/{columnID}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a column by its ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Columns"
                ],
                "summary": "Delete column",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Column ID",
                        "name": "columnID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "error: bad request, invalid column ID format",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "error: not found, column not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "error: internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/comments": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a new comment on a specific task for the authenticated user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Comments"
                ],
                "summary": "Create comment",
                "parameters": [
                    {
                        "description": "Comment Create Request",
                        "name": "comment",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/presenter.CommentCreateReq"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Comment created successfully",
                        "schema": {
                            "$ref": "#/definitions/presenter.CommentCreateRep"
                        }
                    },
                    "400": {
                        "description": "Bad request, invalid user claims, or task not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "Forbidden, user does not have permission to create a comment",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/login": {
            "post": {
                "description": "Authenticate a user with email and password.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Login an existing user",
                "parameters": [
                    {
                        "description": "User Login details",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/presenter.UserLoginReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "auth_token: the authentication token for the user",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "error: bad request, invalid email or password",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/notifications": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve a list of notifications for the authenticated user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Notifications"
                ],
                "summary": "Get user notifications",
                "responses": {
                    "200": {
                        "description": "Notifications successfully fetched",
                        "schema": {
                            "$ref": "#/definitions/presenter.NotifResp"
                        }
                    },
                    "400": {
                        "description": "Bad request, invalid user claims or user not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/notifications/{notifID}": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Marks a specific notification as seen for the authenticated user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Notifications"
                ],
                "summary": "Mark notification as seen",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Notification ID",
                        "name": "notifID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Notification marked as seen",
                        "schema": {
                            "$ref": "#/definitions/presenter.NotifResp"
                        }
                    },
                    "400": {
                        "description": "Bad request, invalid user claims, or notification ID format",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/refresh-token": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Refresh the user's authentication token using a valid refresh token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Refresh authentication token",
                "responses": {
                    "200": {
                        "description": "auth_token: the new authentication token",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "error: bad request, token should be provided",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "error: unauthorized, invalid or expired token",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/register": {
            "post": {
                "description": "Create a new user account with the provided details.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "User registration details",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/presenter.UserRegisterReq"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "user_id: the ID of the newly registered user",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "error: bad request, invalid email or password, or email already exists",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "error: internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/tasks": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new task for the authenticated user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tasks"
                ],
                "summary": "Create task",
                "parameters": [
                    {
                        "description": "Task details",
                        "name": "task",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/presenter.UserTask"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "response: details of created task",
                        "schema": {
                            "$ref": "#/definitions/presenter.CreateTaskResp"
                        }
                    },
                    "400": {
                        "description": "error: bad request, invalid task details",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "error: forbidden, permission denied",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "error: internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "502": {
                        "description": "error: bad gateway, not a member, user not found, board not found, or other error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/tasks/dependency": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Add a dependency between tasks for the authenticated user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tasks"
                ],
                "summary": "Add task dependency",
                "parameters": [
                    {
                        "description": "Dependency details",
                        "name": "dependency",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/presenter.DependentTasks"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "response: details of added task dependency",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "error: bad request, invalid dependency details",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "error: forbidden, permission denied",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "error: internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "502": {
                        "description": "error: bad gateway, circular dependency, task not found, or other error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/tasks/reorder": {
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Reorder the tasks of a board for the authenticated user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tasks"
                ],
                "summary": "Reorder Tasks",
                "parameters": [
                    {
                        "description": "Reorder Tasks Request",
                        "name": "ReorderColumnsRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/presenter.ReorderTasksReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tasks reordered successfully",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/presenter.TaskReorderRespItem"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request, invalid reorder details",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "403": {
                        "description": "Forbidden, permission denied",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/tasks/{taskID}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve the full details of a task by its ID for the authenticated user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tasks"
                ],
                "summary": "Get full task by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Task ID",
                        "name": "taskID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Task successfully fetched",
                        "schema": {
                            "$ref": "#/definitions/presenter.FullTaskResp"
                        }
                    },
                    "400": {
                        "description": "Bad request, invalid task ID or user not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/tasks/{taskID}/column": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update the column of a task by its ID for the authenticated user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tasks"
                ],
                "summary": "Update task column by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Task ID",
                        "name": "taskID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update Task Column Request",
                        "name": "UpdateTaskColReq",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/presenter.UpdateTaskColReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Task successfully updated",
                        "schema": {
                            "$ref": "#/definitions/presenter.UpdatedTaskResp"
                        }
                    },
                    "400": {
                        "description": "Bad request, invalid task ID or column ID, or dependent task issues",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "notification.NotificationType": {
            "type": "string",
            "enum": [
                "Invite User",
                "Move Task",
                "Comment"
            ],
            "x-enum-varnames": [
                "UserInvited",
                "TaskMoved",
                "CommentedNotif"
            ]
        },
        "presenter.BoardColumnResp": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "order": {
                    "type": "integer"
                },
                "tasks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/presenter.BoardTaskResp"
                    }
                }
            }
        },
        "presenter.BoardTaskResp": {
            "type": "object",
            "properties": {
                "end_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "start_at": {
                    "type": "string"
                },
                "story_at": {
                    "type": "integer"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "presenter.BoardUserResp": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                }
            }
        },
        "presenter.ColumnResponseItem": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "order": {
                    "type": "integer"
                }
            }
        },
        "presenter.CommentCreateRep": {
            "type": "object",
            "properties": {
                "comment_id": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "task_id": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "presenter.CommentCreateReq": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "task_id": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "presenter.CreateBoardReq": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "example": "myboard123"
                },
                "type": {
                    "type": "string",
                    "example": "private(public)"
                }
            }
        },
        "presenter.CreateBoardResponse": {
            "type": "object",
            "properties": {
                "board_id": {
                    "type": "string"
                },
                "columns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/presenter.ColumnResponseItem"
                    }
                },
                "created_at": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "presenter.CreateColumnItem": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                }
            }
        },
        "presenter.CreateColumnsRequest": {
            "type": "object",
            "properties": {
                "board_id": {
                    "type": "string"
                },
                "columns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/presenter.CreateColumnItem"
                    }
                }
            }
        },
        "presenter.CreateColumnsResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/presenter.ColumnResponseItem"
                    }
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "presenter.CreateTaskResp": {
            "type": "object",
            "properties": {
                "assignee_user_id": {
                    "type": "string"
                },
                "board_id": {
                    "type": "string"
                },
                "column_id": {
                    "type": "string"
                },
                "dependsOn": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/presenter.DependTaskResp"
                    }
                },
                "description": {
                    "type": "string"
                },
                "end_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "parent_id": {
                    "description": "can be null for tasks not sub tasks",
                    "type": "string"
                },
                "start_at": {
                    "type": "string"
                },
                "story_at": {
                    "type": "integer"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "presenter.DependTaskResp": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "presenter.DependentTasks": {
            "type": "object",
            "required": [
                "depends_on_task_ids",
                "task_id"
            ],
            "properties": {
                "depends_on_task_ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "task_id": {
                    "type": "string"
                }
            }
        },
        "presenter.FullBoardResp": {
            "type": "object",
            "properties": {
                "board_id": {
                    "type": "string"
                },
                "columns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/presenter.BoardColumnResp"
                    }
                },
                "created_at": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/presenter.BoardUserResp"
                    }
                }
            }
        },
        "presenter.FullTaskResp": {
            "type": "object",
            "properties": {
                "dependencies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/presenter.TaskDependTaskResp"
                    }
                },
                "description": {
                    "type": "string"
                },
                "end_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "order": {
                    "type": "integer"
                },
                "parent": {
                    "$ref": "#/definitions/presenter.TaskParentResp"
                },
                "start_at": {
                    "type": "string"
                },
                "story_point": {
                    "type": "integer"
                },
                "subtasks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/presenter.TaskSubTaskResp"
                    }
                },
                "title": {
                    "type": "string"
                },
                "user": {
                    "description": "Relationships",
                    "allOf": [
                        {
                            "$ref": "#/definitions/presenter.TaskUserResp"
                        }
                    ]
                }
            }
        },
        "presenter.InviteMemberResponse": {
            "type": "object",
            "properties": {
                "board_id": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                },
                "user_board_role_id": {
                    "type": "string"
                }
            }
        },
        "presenter.InviteUserToBoard": {
            "type": "object",
            "properties": {
                "board_id": {
                    "type": "string",
                    "example": "aeec51f9-dde3-409d-9415-df771f5b8a62"
                },
                "email": {
                    "type": "string",
                    "example": "inviatee_email.com"
                },
                "role": {
                    "type": "string",
                    "example": "editor"
                },
                "user_board_role_id": {
                    "type": "string",
                    "example": "31e8d41b-a84e-41c6-9564-4e932fccf213"
                }
            }
        },
        "presenter.NotifResp": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "desc": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "is_seen": {
                    "type": "boolean"
                },
                "notif_type": {
                    "$ref": "#/definitions/notification.NotificationType"
                }
            }
        },
        "presenter.ReorderColumnItem": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "presenter.ReorderColumnsRequest": {
            "type": "object",
            "properties": {
                "board_id": {
                    "type": "string"
                },
                "columns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/presenter.ReorderColumnItem"
                    }
                }
            }
        },
        "presenter.ReorderTaskItem": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                }
            }
        },
        "presenter.ReorderTasksReq": {
            "type": "object",
            "properties": {
                "column_id": {
                    "type": "string"
                },
                "tasks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/presenter.ReorderTaskItem"
                    }
                }
            }
        },
        "presenter.TaskDependTaskResp": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "presenter.TaskParentResp": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "presenter.TaskReorderRespItem": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "order": {
                    "type": "integer"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "presenter.TaskSubTaskResp": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "presenter.TaskUserResp": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                }
            }
        },
        "presenter.UpdateTaskColReq": {
            "type": "object",
            "required": [
                "column_id"
            ],
            "properties": {
                "column_id": {
                    "type": "string"
                }
            }
        },
        "presenter.UpdatedTaskResp": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "end_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "order": {
                    "type": "integer"
                },
                "start_at": {
                    "type": "string"
                },
                "story_point": {
                    "type": "integer"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "presenter.UserLoginReq": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "valid_email@folan.com"
                },
                "password": {
                    "type": "string",
                    "example": "Abc@123"
                }
            }
        },
        "presenter.UserRegisterReq": {
            "type": "object",
            "required": [
                "email",
                "first_name",
                "last_name",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "abc@gmail.com"
                },
                "first_name": {
                    "type": "string",
                    "example": "yourname"
                },
                "last_name": {
                    "type": "string",
                    "example": "yourlastname"
                },
                "password": {
                    "type": "string",
                    "example": "Abc@123"
                }
            }
        },
        "presenter.UserTask": {
            "type": "object",
            "required": [
                "assignee_user_id",
                "board_id",
                "title"
            ],
            "properties": {
                "assignee_user_id": {
                    "type": "string"
                },
                "board_id": {
                    "type": "string"
                },
                "depends_on_task_ids": {
                    "description": "for tasks that this task depends on",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "desc": {
                    "type": "string"
                },
                "end_at": {
                    "type": "string"
                },
                "parent_id": {
                    "description": "for tasks that depend on this task",
                    "type": "string"
                },
                "start_at": {
                    "type": "string"
                },
                "story_point": {
                    "type": "integer"
                },
                "task_id": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "\"Type 'Bearer' followed by a space and your JWT token.\"",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}