basePath: /api/v1
definitions:
  notification.NotificationType:
    enum:
    - Invite User
    - Move Task
    type: string
    x-enum-varnames:
    - UserInvited
    - TaskMoved
  presenter.BoardColumnResp:
    properties:
      id:
        type: string
      name:
        type: string
      order:
        type: integer
      tasks:
        items:
          $ref: '#/definitions/presenter.BoardTaskResp'
        type: array
    type: object
  presenter.BoardTaskResp:
    properties:
      end_at:
        type: string
      id:
        type: string
      start_at:
        type: string
      story_at:
        type: integer
      title:
        type: string
    type: object
  presenter.BoardUserResp:
    properties:
      email:
        type: string
      first_name:
        type: string
      id:
        type: string
      last_name:
        type: string
      role:
        type: string
    type: object
  presenter.ColumnResponseItem:
    properties:
      id:
        type: string
      name:
        type: string
      order:
        type: integer
    type: object
  presenter.CreateBoardReq:
    properties:
      name:
        example: myboard123
        type: string
      type:
        example: private(public)
        type: string
    type: object
  presenter.CreateBoardResponse:
    properties:
      board_id:
        type: string
      columns:
        items:
          $ref: '#/definitions/presenter.ColumnResponseItem'
        type: array
      created_at:
        type: string
      name:
        type: string
      type:
        type: string
    type: object
  presenter.CreateColumnItem:
    properties:
      name:
        type: string
    type: object
  presenter.CreateColumnsRequest:
    properties:
      board_id:
        type: string
      columns:
        items:
          $ref: '#/definitions/presenter.CreateColumnItem'
        type: array
    type: object
  presenter.CreateColumnsResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/presenter.ColumnResponseItem'
        type: array
      message:
        type: string
    type: object
  presenter.CreateTaskResp:
    properties:
      assignee_user_id:
        type: string
      board_id:
        type: string
      column_id:
        type: string
      dependsOn:
        items:
          $ref: '#/definitions/presenter.DependTaskResp'
        type: array
      description:
        type: string
      end_at:
        type: string
      id:
        type: string
      parent_id:
        description: can be null for tasks not sub tasks
        type: string
      start_at:
        type: string
      story_at:
        type: integer
      title:
        type: string
    type: object
  presenter.DependTaskResp:
    properties:
      id:
        type: string
    type: object
  presenter.DependentTasks:
    properties:
      depends_on_task_ids:
        items:
          type: string
        type: array
      task_id:
        type: string
    required:
    - depends_on_task_ids
    - task_id
    type: object
  presenter.FullBoardResp:
    properties:
      board_id:
        type: string
      columns:
        items:
          $ref: '#/definitions/presenter.BoardColumnResp'
        type: array
      created_at:
        type: string
      name:
        type: string
      type:
        type: string
      users:
        items:
          $ref: '#/definitions/presenter.BoardUserResp'
        type: array
    type: object
  presenter.FullTaskResp:
    properties:
      dependencies:
        items:
          $ref: '#/definitions/presenter.TaskDependTaskResp'
        type: array
      description:
        type: string
      end_at:
        type: string
      id:
        type: string
      order:
        type: integer
      parent:
        $ref: '#/definitions/presenter.TaskParentResp'
      start_at:
        type: string
      story_point:
        type: integer
      subtasks:
        items:
          $ref: '#/definitions/presenter.TaskSubTaskResp'
        type: array
      title:
        type: string
      user:
        allOf:
        - $ref: '#/definitions/presenter.TaskUserResp'
        description: Relationships
    type: object
  presenter.InviteMemberResponse:
    properties:
      board_id:
        type: string
      email:
        type: string
      role:
        type: string
      user_board_role_id:
        type: string
    type: object
  presenter.InviteUserToBoard:
    properties:
      board_id:
        example: aeec51f9-dde3-409d-9415-df771f5b8a62
        type: string
      email:
        example: inviatee_email.com
        type: string
      role:
        example: editor
        type: string
      user_board_role_id:
        example: 31e8d41b-a84e-41c6-9564-4e932fccf213
        type: string
    type: object
  presenter.NotifResp:
    properties:
      created_at:
        type: string
      desc:
        type: string
      id:
        type: string
      is_seen:
        type: boolean
      notif_type:
        $ref: '#/definitions/notification.NotificationType'
    type: object
  presenter.ReorderColumnItem:
    properties:
      id:
        type: string
    type: object
  presenter.ReorderColumnsRequest:
    properties:
      board_id:
        type: string
      columns:
        items:
          $ref: '#/definitions/presenter.ReorderColumnItem'
        type: array
    type: object
  presenter.TaskDependTaskResp:
    properties:
      id:
        type: string
      title:
        type: string
    type: object
  presenter.TaskParentResp:
    properties:
      id:
        type: string
      title:
        type: string
    type: object
  presenter.TaskSubTaskResp:
    properties:
      id:
        type: string
      title:
        type: string
    type: object
  presenter.TaskUserResp:
    properties:
      email:
        type: string
      first_name:
        type: string
      id:
        type: string
      last_name:
        type: string
    type: object
  presenter.UpdateTaskColReq:
    properties:
      column_id:
        type: string
    required:
    - column_id
    type: object
  presenter.UpdatedTaskResp:
    properties:
      description:
        type: string
      end_at:
        type: string
      id:
        type: string
      order:
        type: integer
      start_at:
        type: string
      story_point:
        type: integer
      title:
        type: string
    type: object
  presenter.UserLoginReq:
    properties:
      email:
        example: valid_email@folan.com
        type: string
      password:
        example: Abc@123
        type: string
    required:
    - email
    - password
    type: object
  presenter.UserRegisterReq:
    properties:
      email:
        example: abc@gmail.com
        type: string
      first_name:
        example: yourname
        type: string
      last_name:
        example: yourlastname
        type: string
      password:
        example: Abc@123
        type: string
    required:
    - email
    - first_name
    - last_name
    - password
    type: object
  presenter.UserTask:
    properties:
      assignee_user_id:
        type: string
      board_id:
        type: string
      depends_on_task_ids:
        description: for tasks that this task depends on
        items:
          type: string
        type: array
      desc:
        type: string
      end_at:
        type: string
      parent_id:
        description: for tasks that depend on this task
        type: string
      start_at:
        type: string
      story_point:
        type: integer
      task_id:
        type: string
      title:
        type: string
    required:
    - assignee_user_id
    - board_id
    - title
    type: object
host: 127.0.0.1:8080
info:
  contact:
    name: HeisenGo
    url: https://github.com/HeisenGo
  description: Task Management backend server
  title: heisenflow-System
  version: "1.0"
paths:
  /boards:
    post:
      consumes:
      - application/json
      description: Create a new board for the authenticated user.
      parameters:
      - description: Board details
        in: body
        name: board
        required: true
        schema:
          $ref: '#/definitions/presenter.CreateBoardReq'
      produces:
      - application/json
      responses:
        "201":
          description: 'board: the created board details'
          schema:
            $ref: '#/definitions/presenter.CreateBoardResponse'
        "400":
          description: 'error: bad request, invalid board details'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: 'error: internal server error'
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Create user board
      tags:
      - Boards
  /boards/{boardID}:
    delete:
      consumes:
      - application/json
      description: Deletes a specific board by its ID for the authenticated user.
      parameters:
      - description: Board ID
        in: path
        name: boardID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad request, invalid user claims, or board ID format
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden, user does not have permission to delete the board
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Delete board
      tags:
      - Boards
    get:
      consumes:
      - application/json
      description: Retrieve a full board by its ID for the authenticated user.
      parameters:
      - description: Board ID
        in: path
        name: boardID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 'board: the full board details'
          schema:
            $ref: '#/definitions/presenter.FullBoardResp'
        "400":
          description: 'error: bad request, wrong claim type or invalid board ID format'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: 'error: internal server error'
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get full board by ID
      tags:
      - Boards
  /boards/invite:
    post:
      consumes:
      - application/json
      description: Invite a user to a board with a specified role.
      parameters:
      - description: Invitation details
        in: body
        name: invite
        required: true
        schema:
          $ref: '#/definitions/presenter.InviteUserToBoard'
      produces:
      - application/json
      responses:
        "200":
          description: 'invite: the details of the invitation'
          schema:
            $ref: '#/definitions/presenter.InviteMemberResponse'
        "400":
          description: 'error: bad request, invalid invitation details'
          schema:
            additionalProperties: true
            type: object
        "403":
          description: 'error: forbidden, permission denied to invite'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: 'error: internal server error'
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Invite user to board
      tags:
      - Boards
  /columns:
    post:
      consumes:
      - application/json
      description: Create multiple columns for a specified board.
      parameters:
      - description: Board ID
        in: body
        name: board_id
        required: true
        schema:
          type: string
      - description: Columns creation details
        in: body
        name: columns
        required: true
        schema:
          $ref: '#/definitions/presenter.CreateColumnsRequest'
      produces:
      - application/json
      responses:
        "201":
          description: 'response: details of created columns'
          schema:
            $ref: '#/definitions/presenter.CreateColumnsResponse'
        "400":
          description: 'error: bad request, invalid board ID format or missing columns
            details'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: 'error: internal server error'
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Create columns
      tags:
      - Columns
  /columns/{columnID}:
    delete:
      consumes:
      - application/json
      description: Delete a column by its ID.
      parameters:
      - description: Column ID
        in: path
        name: columnID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: 'error: bad request, invalid column ID format'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'error: not found, column not found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: 'error: internal server error'
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Delete column
      tags:
      - Columns
  /columns/reorder:
    put:
      consumes:
      - application/json
      description: Reorder the columns of a board for the authenticated user.
      parameters:
      - description: Reorder Columns Request
        in: body
        name: ReorderColumnsRequest
        required: true
        schema:
          $ref: '#/definitions/presenter.ReorderColumnsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Columns reordered successfully
          schema:
            items:
              $ref: '#/definitions/presenter.ColumnResponseItem'
            type: array
        "400":
          description: Bad request, invalid reorder details
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden, permission denied
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Reorder columns
      tags:
      - Columns
  /login:
    post:
      consumes:
      - application/json
      description: Authenticate a user with email and password.
      parameters:
      - description: User Login details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/presenter.UserLoginReq'
      produces:
      - application/json
      responses:
        "200":
          description: 'auth_token: the authentication token for the user'
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'error: bad request, invalid email or password'
          schema:
            additionalProperties: true
            type: object
      summary: Login an existing user
      tags:
      - Auth
  /notifications:
    get:
      consumes:
      - application/json
      description: Retrieve a list of notifications for the authenticated user.
      produces:
      - application/json
      responses:
        "200":
          description: Notifications successfully fetched
          schema:
            $ref: '#/definitions/presenter.NotifResp'
        "400":
          description: Bad request, invalid user claims or user not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get user notifications
      tags:
      - Notifications
  /notifications/{notifID}:
    put:
      consumes:
      - application/json
      description: Marks a specific notification as seen for the authenticated user.
      parameters:
      - description: Notification ID
        in: path
        name: notifID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Notification marked as seen
          schema:
            $ref: '#/definitions/presenter.NotifResp'
        "400":
          description: Bad request, invalid user claims, or notification ID format
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Mark notification as seen
      tags:
      - Notifications
  /public/boards:
    get:
      consumes:
      - application/json
      description: Retrieve the public boards.
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Page size
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 'boards: paginated list of public boards'
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'error: bad request, wrong claim type'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: 'error: internal server error'
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get public boards
      tags:
      - Boards
  /refresh-token:
    post:
      consumes:
      - application/json
      description: Refresh the user's authentication token using a valid refresh token.
      produces:
      - application/json
      responses:
        "200":
          description: 'auth_token: the new authentication token'
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'error: bad request, token should be provided'
          schema:
            additionalProperties: true
            type: object
        "401":
          description: 'error: unauthorized, invalid or expired token'
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Refresh authentication token
      tags:
      - Auth
  /register:
    post:
      consumes:
      - application/json
      description: Create a new user account with the provided details.
      parameters:
      - description: User registration details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/presenter.UserRegisterReq'
      produces:
      - application/json
      responses:
        "201":
          description: 'user_id: the ID of the newly registered user'
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'error: bad request, invalid email or password, or email already
            exists'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: 'error: internal server error'
          schema:
            additionalProperties: true
            type: object
      summary: Register a new user
      tags:
      - Auth
  /tasks:
    post:
      consumes:
      - application/json
      description: Create a new task for the authenticated user.
      parameters:
      - description: Task details
        in: body
        name: task
        required: true
        schema:
          $ref: '#/definitions/presenter.UserTask'
      produces:
      - application/json
      responses:
        "201":
          description: 'response: details of created task'
          schema:
            $ref: '#/definitions/presenter.CreateTaskResp'
        "400":
          description: 'error: bad request, invalid task details'
          schema:
            additionalProperties: true
            type: object
        "403":
          description: 'error: forbidden, permission denied'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: 'error: internal server error'
          schema:
            additionalProperties: true
            type: object
        "502":
          description: 'error: bad gateway, not a member, user not found, board not
            found, or other error'
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Create task
      tags:
      - Tasks
  /tasks/{taskID}:
    get:
      consumes:
      - application/json
      description: Retrieve the full details of a task by its ID for the authenticated
        user.
      parameters:
      - description: Task ID
        in: path
        name: taskID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Task successfully fetched
          schema:
            $ref: '#/definitions/presenter.FullTaskResp'
        "400":
          description: Bad request, invalid task ID or user not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get full task by ID
      tags:
      - Tasks
  /tasks/{taskID}/column:
    put:
      consumes:
      - application/json
      description: Update the column of a task by its ID for the authenticated user.
      parameters:
      - description: Task ID
        in: path
        name: taskID
        required: true
        type: string
      - description: Update Task Column Request
        in: body
        name: UpdateTaskColReq
        required: true
        schema:
          $ref: '#/definitions/presenter.UpdateTaskColReq'
      produces:
      - application/json
      responses:
        "200":
          description: Task successfully updated
          schema:
            $ref: '#/definitions/presenter.UpdatedTaskResp'
        "400":
          description: Bad request, invalid task ID or column ID, or dependent task
            issues
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Update task column by ID
      tags:
      - Tasks
  /tasks/dependency:
    post:
      consumes:
      - application/json
      description: Add a dependency between tasks for the authenticated user.
      parameters:
      - description: Dependency details
        in: body
        name: dependency
        required: true
        schema:
          $ref: '#/definitions/presenter.DependentTasks'
      produces:
      - application/json
      responses:
        "201":
          description: 'response: details of added task dependency'
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'error: bad request, invalid dependency details'
          schema:
            additionalProperties: true
            type: object
        "403":
          description: 'error: forbidden, permission denied'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: 'error: internal server error'
          schema:
            additionalProperties: true
            type: object
        "502":
          description: 'error: bad gateway, circular dependency, task not found, or
            other error'
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Add task dependency
      tags:
      - Tasks
  /user/boards:
    get:
      consumes:
      - application/json
      description: Retrieve the boards associated with the authenticated user.
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Page size
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 'boards: paginated list of user''s boards'
          schema:
            $ref: '#/definitions/presenter.BoardUserResp'
        "400":
          description: 'error: bad request, wrong claim type'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: 'error: internal server error'
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get user's boards
      tags:
      - Boards
securityDefinitions:
  BearerAuth:
    description: '"Type ''Bearer'' followed by a space and your JWT token."'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
