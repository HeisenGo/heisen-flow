basePath: /
definitions:
  presenter.BoardColumnResp:
    properties:
      id:
        type: string
      name:
        type: string
      order:
        type: integer
      tasks:
        items:
          $ref: '#/definitions/presenter.BoardTaskResp'
        type: array
    type: object
  presenter.BoardTaskResp:
    properties:
      end_at:
        type: string
      id:
        type: string
      start_at:
        type: string
      story_at:
        type: integer
      title:
        type: string
    type: object
  presenter.BoardUserResp:
    properties:
      email:
        type: string
      first_name:
        type: string
      id:
        type: string
      last_name:
        type: string
      role:
        type: string
    type: object
  presenter.ColumnResponseItem:
    properties:
      id:
        type: string
      name:
        type: string
      order:
        type: integer
    type: object
  presenter.CreateColumnItem:
    properties:
      name:
        type: string
    type: object
  presenter.CreateColumnsRequest:
    properties:
      board_id:
        type: string
      columns:
        items:
          $ref: '#/definitions/presenter.CreateColumnItem'
        type: array
    type: object
  presenter.CreateColumnsResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/presenter.ColumnResponseItem'
        type: array
      message:
        type: string
    type: object
  presenter.DependentTasks:
    properties:
      depends_on_task_ids:
        items:
          type: string
        type: array
      task_id:
        type: string
    required:
    - depends_on_task_ids
    - task_id
    type: object
  presenter.FullBoardResp:
    properties:
      board_id:
        type: string
      columns:
        items:
          $ref: '#/definitions/presenter.BoardColumnResp'
        type: array
      created_at:
        type: string
      name:
        type: string
      type:
        type: string
      users:
        items:
          $ref: '#/definitions/presenter.BoardUserResp'
        type: array
    type: object
  presenter.InviteUserToBoard:
    properties:
      board_id:
        type: string
      email:
        type: string
      role:
        type: string
      user_board_role_id:
        type: string
    type: object
  presenter.UserBoard:
    properties:
      board_id:
        type: string
      created_at:
        type: string
      name:
        type: string
      type:
        type: string
    type: object
  presenter.UserRegisterReq:
    properties:
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        type: string
    required:
    - email
    - first_name
    - last_name
    - password
    type: object
  presenter.UserTask:
    properties:
      assignee_user_id:
        type: string
      board_id:
        type: string
      depends_on_task_ids:
        description: for tasks that this task depends on
        items:
          type: string
        type: array
      desc:
        type: string
      end_at:
        type: string
      parent_id:
        description: for tasks that depend on this task
        type: string
      start_at:
        type: string
      story_point:
        type: integer
      task_id:
        type: string
      title:
        type: string
    required:
    - assignee_user_id
    - board_id
    - title
    type: object
host: localhost:8080
info:
  contact:
    name: heisen-GO
    url: https://github.com/HeisenGo
  description: Task Mangment backend server
  title: heisenflow-System
  version: "1.0"
paths:
  /boards/{boardID}:
    get:
      consumes:
      - application/json
      description: Retrieve a full board by its ID for the authenticated user.
      parameters:
      - description: Board ID
        in: path
        name: boardID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 'board: the full board details'
          schema:
            $ref: '#/definitions/presenter.FullBoardResp'
        "400":
          description: 'error: bad request, wrong claim type or invalid board ID format'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: 'error: internal server error'
          schema:
            additionalProperties: true
            type: object
      summary: Get full board by ID
      tags:
      - Boards
  /boards/invite:
    post:
      consumes:
      - application/json
      description: Invite a user to a board with a specified role.
      parameters:
      - description: Invitation details
        in: body
        name: invite
        required: true
        schema:
          $ref: '#/definitions/presenter.InviteUserToBoard'
      produces:
      - application/json
      responses:
        "200":
          description: 'invite: the details of the invitation'
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'error: bad request, invalid invitation details'
          schema:
            additionalProperties: true
            type: object
        "403":
          description: 'error: forbidden, permission denied to invite'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: 'error: internal server error'
          schema:
            additionalProperties: true
            type: object
      summary: Invite user to board
      tags:
      - Boards
  /columns:
    post:
      consumes:
      - application/json
      description: Create multiple columns for a specified board.
      parameters:
      - description: Board ID
        in: body
        name: board_id
        required: true
        schema:
          type: string
      - description: Columns creation details
        in: body
        name: columns
        required: true
        schema:
          $ref: '#/definitions/presenter.CreateColumnsRequest'
      produces:
      - application/json
      responses:
        "201":
          description: 'response: details of created columns'
          schema:
            $ref: '#/definitions/presenter.CreateColumnsResponse'
        "400":
          description: 'error: bad request, invalid board ID format or missing columns
            details'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: 'error: internal server error'
          schema:
            additionalProperties: true
            type: object
      summary: Create columns
      tags:
      - Columns
  /columns/{columnID}:
    delete:
      consumes:
      - application/json
      description: Delete a column by its ID.
      parameters:
      - description: Column ID
        in: path
        name: columnID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: 'error: bad request, invalid column ID format'
          schema:
            additionalProperties: true
            type: object
        "404":
          description: 'error: not found, column not found'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: 'error: internal server error'
          schema:
            additionalProperties: true
            type: object
      summary: Delete column
      tags:
      - Columns
  /login:
    post:
      consumes:
      - application/json
      description: Authenticate a user with email and password.
      parameters:
      - description: Login details
        in: body
        name: login
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: 'auth_token: the authentication token for the user'
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'error: bad request, invalid email or password'
          schema:
            additionalProperties: true
            type: object
      summary: Login an existing user
      tags:
      - Auth
  /public/boards:
    get:
      consumes:
      - application/json
      description: Retrieve the public boards.
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Page size
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 'boards: paginated list of public boards'
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'error: bad request, wrong claim type'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: 'error: internal server error'
          schema:
            additionalProperties: true
            type: object
      summary: Get public boards
      tags:
      - Boards
  /refresh-token:
    post:
      consumes:
      - application/json
      description: Refresh the user's authentication token using a valid refresh token.
      parameters:
      - description: Bearer {refresh_token}
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 'auth_token: the new authentication token'
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'error: bad request, token should be provided'
          schema:
            additionalProperties: true
            type: object
        "401":
          description: 'error: unauthorized, invalid or expired token'
          schema:
            additionalProperties: true
            type: object
      summary: Refresh authentication token
      tags:
      - Auth
  /register:
    post:
      consumes:
      - application/json
      description: Create a new user account with the provided details.
      parameters:
      - description: User registration details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/presenter.UserRegisterReq'
      produces:
      - application/json
      responses:
        "201":
          description: 'user_id: the ID of the newly registered user'
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'error: bad request, invalid email or password, or email already
            exists'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: 'error: internal server error'
          schema:
            additionalProperties: true
            type: object
      summary: Register a new user
      tags:
      - Auth
  /tasks:
    post:
      consumes:
      - application/json
      description: Create a new task for the authenticated user.
      parameters:
      - description: Task details
        in: body
        name: task
        required: true
        schema:
          $ref: '#/definitions/presenter.UserTask'
      produces:
      - application/json
      responses:
        "201":
          description: 'response: details of created task'
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'error: bad request, invalid task details'
          schema:
            additionalProperties: true
            type: object
        "403":
          description: 'error: forbidden, permission denied'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: 'error: internal server error'
          schema:
            additionalProperties: true
            type: object
        "502":
          description: 'error: bad gateway, not a member, user not found, board not
            found, or other error'
          schema:
            additionalProperties: true
            type: object
      summary: Create task
      tags:
      - Tasks
  /tasks/dependency:
    post:
      consumes:
      - application/json
      description: Add a dependency between tasks for the authenticated user.
      parameters:
      - description: Dependency details
        in: body
        name: dependency
        required: true
        schema:
          $ref: '#/definitions/presenter.DependentTasks'
      produces:
      - application/json
      responses:
        "201":
          description: 'response: details of added task dependency'
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'error: bad request, invalid dependency details'
          schema:
            additionalProperties: true
            type: object
        "403":
          description: 'error: forbidden, permission denied'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: 'error: internal server error'
          schema:
            additionalProperties: true
            type: object
        "502":
          description: 'error: bad gateway, circular dependency, task not found, or
            other error'
          schema:
            additionalProperties: true
            type: object
      summary: Add task dependency
      tags:
      - Tasks
  /user/boards:
    get:
      consumes:
      - application/json
      description: Retrieve the boards associated with the authenticated user.
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Page size
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 'boards: paginated list of user''s boards'
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'error: bad request, wrong claim type'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: 'error: internal server error'
          schema:
            additionalProperties: true
            type: object
      summary: Get user's boards
      tags:
      - Boards
    post:
      consumes:
      - application/json
      description: Create a new board for the authenticated user.
      parameters:
      - description: Board details
        in: body
        name: board
        required: true
        schema:
          $ref: '#/definitions/presenter.UserBoard'
      produces:
      - application/json
      responses:
        "201":
          description: 'board: the created board details'
          schema:
            additionalProperties: true
            type: object
        "400":
          description: 'error: bad request, invalid board details'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: 'error: internal server error'
          schema:
            additionalProperties: true
            type: object
      summary: Create user board
      tags:
      - Boards
swagger: "2.0"
